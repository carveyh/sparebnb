.main-test-div {
	font-size: 20px;
}

.fake-header {
	color: green;
	font-size: 40px;
}

.main-test-div p {
	
}

.main-test-div li:nth-child(1) {
	font-size: 2em;
}

.main-test-div li:nth-child(2) {
	font-size: 2rem;
}

.ani-parent {
	background-color: hsla(200, 100%, 20%);
	height: 400px;
	width: 400px;
}

.ani-child {
	background-color: red;
	height: 50%;
	width: 50%;
	border-radius: 0px;
	/* by default, transition applies to all changes in style. we want to select specific. */
	/* transition: all; */
	/* transition: 1s; */

	/* NOTE: want to apply `transition` to base class, and NOT modified e.g. :hover class */
	/* transition: transform 5s linear; */
	/* transition: transform 1s ease-in-out;
	transition: transform 1s ease-in; */
	/* transition: transform 0.5s ease-out; */
	/* transition: border-radius 0.5s ease-in-out 0.1s; */
	/* transition: css property to transition, transition duration, timing function, delay before start */
	
	/* transition: transform 1s ease-in; */
	animation: left-to-right 1s linear forwards infinite 0.1s;

}

.ani-parent:hover .ani-child {
	/* transform: translateX(100%); */
	/* background-color: yellow; */
	/* border-radius: 100px; */


	/* Convert from simple transition to complex animation: */
	/* UNLIKE TRANSITION: write the animation where you want it to happen: */
	/* SYNTAX: animation name (custom), duration, timing function, iteration count, direction (alternate / alternate-reverse), delay */
		/* RE: animation name - see @keyframes below */
	/* FROM: transition: transform 1s; */
	/* TO: */
	
	/* animation-fill-mode: - need to specify if want style to apply at end of animation */
		/* forwards - keep all 100% properties applied at end of animation */
		/* backwards - apply all 0% properties before start of animation */
		/* both -  do both */
	/* animation: left-to-right 1s ease-in; */
	/* animation: left-to-right 1s ease-in forwards 3 alternate-reverse 0.3s; */
	/* animation: left-to-right 1s ease-in forwards infinite alternate-reverse 0.3s; */

	animation-play-state: running;
	animation-play-state: paused;
}

/* This must be outside any selector. */
@keyframes left-to-right {
	0% {
		transform: translateX(0%);
	}
	25% {
		transform: translateX(100%);
	}
	50% {
		transform: translateX(100%) translateY(100%);
	}
	75% {
		transform: translateY(100%);
	}
	100% {
		transform: translateX(0%);
	}
}

.grid-container-container {
	/* display: flex; */
	display: block;
	padding: 0px 80px;
	/* width: 100vw; */
	container-type: inline-size;
}

@container (width > 1px) {
	.grid-container {
		/* width: 80cqw; */
		/* background-color: lightgrey; */
		/* width: 100cqw; */
	}
}

.grid-container {
	display: grid;
	/* max-width: 100cqw; doesn't do anything... */


	/* ------COLUMNS------ */
	/* hard code column widths */
	grid-template-columns: 200px 100px;
	
	/* setup grid columns to size dynamically based on contents */
	/* nfr similar to flex-grow */
	grid-template-columns: 2fr 1fr;
	
	/* repeat: create n sets of (specified columns)  */
	grid-template-columns: repeat(3,2fr 1fr);
	
	/* Can combine different units and repeats. */
	grid-template-columns: repeat(3,2fr 1fr) 50px 5fr;
	
	/* Simple demo spec */
	grid-template-columns: repeat(4, 1fr);
	/* grid-template-columns: repeat(4, 302px); */
	/* grid-template-columns: 200px 250px; */
	
	/* ------ROWS------ */
	/* NOTE: if grid items themselves have larger box-sizing: border-box size */
	/* than the specified row height, the grid items' heigh does not change, */
	/* will get 'stacked' on top */
	/* grid-template-rows: 200px 150px; */
	
	/* Specify height of unspecified rows, can be a pattern as well */
	/* grid-auto-rows: 150px; */

	/* This specifies all rows, unless specified, will have min height of 150px */
	/* and can grow to contain its full elements (auto) */
	grid-auto-rows: minmax(min-content, max-content);
	grid-auto-rows: minmax(300px, max-content);

	/* spacing in btwn */
	row-gap: 40px;
	column-gap: 24px;
	/* Does both row and col gaps */
	/* gap:20px; */

	/* Aligning grid-container inside its own container: */
	/* justify-content: space-between; */
	/* align-content: stretch; */
	/* height: 2000px; */

	/* Aligning items inside the grid. Default is stretch, override will not. */
	/* justify-items: center;
	align-items: center; */

	/* grid-template-areas: 
		"header header"
		"sidebar content"
		"sidebar content"
		; */
}

.grid-item {
	/* display: flex; */
	/* flex-direction: column; */
	display: grid;
	grid-template-rows: auto 88px;

}

.listings-photo-container {
	display:grid;
	justify-items: center;
	min-width: 0px;
	border-radius: 12px;
	overflow: hidden;
	margin-bottom: 12px;
	/* THIS IS VERY IMPORTANT FOR CONTROLLING GRID ITEM DIMENSIONS~!!! */
	/* Here, since WxH are functions, the input is the container grid column width for W. */
	aspect-ratio: 325/309;
}

.listings-photo {
	/* Code needed for the image to fit its container in a certain way. */
	width: 100%;
	height: 100%;
	object-fit:cover;
}

.listing-favorite-button {
	position: absolute;
  top: 18px;
  right: 18px;
}

.listing-favorite-button > i {
	font-size: 20px;
	/* text-shadow: 0px 0px 2px white; */
	/* Will override color (regardless of order) */
	-webkit-text-fill-color: black; 
  -webkit-text-stroke-width: 1px;
  -webkit-text-stroke-color: white;
	/* -webkit-text-stroke: 1px #F8F8F8; */
}

.grid-item * {
	font-size: 15px;
}

.listings-text-container p {
	display: flex;
	/* width: 80%; */
	padding-top: 5px;
	font-weight: 300;
	color: rgb(113,113,113)
}

.listings-index-price-para * {
	padding-top: 5px;
	color: rgb(0,0,0);
}

.listings-text-container > p:nth-of-type(1), .listings-index-price-figure {
	font-weight: 600;
	color: rgb(0,0,0);
}

.listings-text-container > p:nth-of-type(1) {
	padding-top: 0px;
}

.listings-index-price-para {
	display: flex;
	flex-direction: row;
}

.grid-item-1 {
	/* grid-area: header; */

	/* Note - these count gaps as columns, care if need to bridge a gap */
	/* grid-column-start: 1; */
	/* grid-column-end: 3;  */
	/* A negative col number specifies the farthest column */
	/* grid-column-end: -1;  */

	/* Shorthand: */
	/* grid-column: 1 / 3; */
	
	/* Or: */
	/* grid-column: span 2; */
}

.grid-item-2 {
	/* grid-area: sidebar; */

	/* grid-row-start: 2; */
	/* grid-row-end: 4; */
	/* or: */
	/* grid-row: 2 / 4; */
	/* or: */
	/* grid-row: span 2; */
}

/* .grid-item-7 {
	grid-area: content;
} */

.grid-item {
	/* min-width: 100px; */
	/* min-width: 0px; */
	/* max-width: 100px; */
  position: relative;
  font-size: 25px;
  /* padding: 20px;
  padding-top: 50px; */
  /* background-color: #379AD6; */
  color: #222;
  /* border: 1px solid white; */
	/* overflow: hidden; */
	/* overflow: scroll; */
}


/* @container (min-width: 800px){ */
@container (width < 940px){
	.grid-item {
		color: green;
	}

	.grid-container {
		grid-template-columns: repeat(3, 200px);
		grid-template-columns: repeat(3, 1fr);
	}
}

@container (width < 648px){
	.grid-item {
		color: blue;
	}

	.grid-container {
		grid-template-columns: repeat(2, 1fr);
	}
}

.grid-item:nth-child(odd) {
  /* background-color: #5bbdfa; */
}

/* .grid-item::before {
  content: 'Listing';
  position: absolute;
  font-size: 25px;
  font-weight: bold;
  top: 10px;
  left: 15px;
} */

.grid-item::after {
  position: absolute;
  font-size: 25px;
  top: 10px;
  right: 15px;
  font-weight: bold;
}